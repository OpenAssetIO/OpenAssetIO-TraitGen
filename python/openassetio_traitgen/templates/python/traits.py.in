{% if copyrightOwner -%}
# SPDX-License-Identifier: {{ spdxLicenseIdentifier }}
# Copyright {{ copyrightDate }} {{ copyrightOwner }}
{% endif %}
"""
Trait definitions in the '{{ namespace.id }}' namespace.

{{ namespace.description | wordwrap(72) }}
"""

# WARNING: This file is auto-generated by openassetio-traitgen, do not edit.

from typing import Union

from openassetio import TraitsData

{% for trait in namespace.members %}
class {{ trait.name | to_py_class_name }}Trait:
    """
    {{ trait.description | wordwrap(68) | indent(4) }}
    {% if trait.usage -%}
    Usage: {{ trait.usage | join(', ') }}
    {% endif -%}
    """
    kId = "{{ trait.id }}"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)

    {% if trait.properties -%}
        {% for property in trait.properties -%}
            {% set VarMethodName = property.id | to_py_var_accessor_name -%}
            {% set VarName = property.id | to_py_var_name -%}
            {% set VarType = property.type | to_py_type %}
    def set{{ VarMethodName }}(self, {{ VarName }}: {{ VarType }}):
        """
        Sets the {{ property.id }} property.

        {{ property.description | wordwrap(64) | indent(8) }}
        """
        if not isinstance({{ VarName }}, {{ VarType }}):
            raise TypeError("{{ property.id }} must be a '{{ VarType }}'.")
        self.__data.setTraitProperty(self.kId, "{{ property.id }}", {{ VarName }})

    def get{{ VarMethodName }}(self, defaultValue: {{ VarType }}=None) -> Union[{{ VarType }}, None]:
        """
        Gets the value of the {{ property.id }} property or the supplied default.

        {{ property.description | wordwrap(64) | indent(8) }}
        """
        value = self.__data.getTraitProperty(self.kId, "{{ property.id }}")
        if value is None:
            return defaultValue

        if not isinstance(value, {{ VarType }}):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be '{{ VarType }}'.")
            return defaultValue
        return value
        {%  endfor %}
    {% endif %}

{% endfor -%}
