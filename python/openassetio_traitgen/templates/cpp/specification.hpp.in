{%- if copyrightOwner -%}
// SPDX-License-Identifier: {{ spdxLicenseIdentifier }}
// Copyright {{ copyrightDate }} {{ copyrightOwner }}
{%- endif %}
// WARNING: This file is auto-generated by openassetio-traitgen, do not edit.

#pragma once

#include <memory>

#include <openassetio/TraitsData.hpp>
#include <openassetio/trait/collection.hpp>

namespace openassetio_abi = openassetio::{{ openassetio_abi_version }};

{%- for trait in (specification.trait_set | selectattr("package", "!=", package.id) | sort) -%}
{%- if loop.first %}
{% endif %}
#include <{{ trait.package | to_cpp_namespace_name }}/traits/{{ trait.namespace | to_cpp_namespace_name }}/{{ trait.name | to_cpp_class_name }}Trait.hpp>
{%- endfor -%}

{%- for trait in (specification.trait_set | selectattr("package", "==", package.id) | sort) -%}
{%- if loop.first %}
{% endif %}
#include "../../traits/{{ trait.namespace | to_cpp_namespace_name }}/{{ trait.name | to_cpp_class_name }}Trait.hpp"
{%- endfor -%}

{%- macro trait_type(trait) -%}
{%- if trait.package == package.id -%}
traits::{{trait.namespace | to_cpp_namespace_name }}::{{trait.name | to_cpp_class_name }}Trait
{%- else -%}
{{ trait.package | to_cpp_namespace_name }}::traits::{{trait.namespace | to_cpp_namespace_name }}::{{ trait.name | to_cpp_class_name }}Trait
{%- endif -%}
{%- endmacro %}

namespace {{ package.id | to_cpp_namespace_name }} {
inline namespace {{ traitgen_abi_version }} {
namespace specifications::{{ namespace.id | to_cpp_namespace_name }} {
/**
 * {{ specification.description | wordwrap(69, wrapstring="\n* ") | indent(1) }}
{%- if specification.usage %}
 * Usage: {{ specification.usage | join(', ') }}
{%- endif %}
 */
class {{ specification.id | to_cpp_class_name }}Specification {
public:
  inline static const openassetio_abi::trait::TraitSet kTraitSet{
    {%- for trait in specification.trait_set %}
    // '{{ trait.id }}'
      {%- if trait.package == package.id %}
    traits::{{ trait.namespace | to_cpp_namespace_name }}::{{ trait.name | to_cpp_class_name }}Trait::kId,
      {%- else %}
    {{ trait.package | to_cpp_namespace_name }}::traits::{{ trait.namespace | to_cpp_namespace_name }}::{{ trait.name | to_cpp_class_name }}Trait::kId,
      {%- endif %}
    {%- endfor %}
  };

  /**
   * Returns a new instance of the Specification, holding a new
   * TraitsData instance, imbued with the specification's traits.
   */
  static {{ specification.id | to_cpp_class_name }}Specification create() {
    return {{ specification.id | to_cpp_class_name }}Specification{
      openassetio_abi::TraitsData::make(kTraitSet)};
  }

  /**
   * Constructs the specification as a view on the supplied shared
   * TraitsData instance.
   *
   * @warning Specifications are always a view on the supplied data,
   * which is held by reference. Any changes made to the data will be
   * visible to any other specifications or traits that wrap the same
   * TraitsData instance.
   */
  explicit {{ specification.id | to_cpp_class_name }}Specification(openassetio_abi::TraitsDataPtr traitsData)
    : traitsData_{std::move(traitsData)}
  {}

  /**
   * Returns the underlying (shared) TraitsData instance held by this
   * specification.
   */
  [[nodiscard]] const openassetio_abi::TraitsDataPtr& traitsData() const {
    return traitsData_;
  }

{% for trait in specification.trait_set %}
  /**
   * Returns the view for the '{{ trait.id }}'
   * trait wrapped around the data held in this instance.
   */
  [[nodiscard]] {{ trait_type(trait) }} {{ trait.unique_name_parts | to_cpp_trait_accessor_name }}Trait() const {
    return {{ trait_type(trait) }}{traitsData_};
  }
{% endfor %}

private:
  openassetio_abi::TraitsDataPtr traitsData_;
};
}  // namespace specifications::{{ namespace.id | to_cpp_namespace_name }}
}  // namespace {{ traitgen_abi_version }}
}  // namespace {{ package.id | to_cpp_namespace_name }}
