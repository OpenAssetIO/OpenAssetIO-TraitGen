{%- if copyrightOwner -%}
// SPDX-License-Identifier: {{ spdxLicenseIdentifier }}
// Copyright {{ copyrightDate }} {{ copyrightOwner }}
{%- endif %}
// WARNING: This file is auto-generated by openassetio-traitgen, do not edit.

#pragma once

#include <openassetio/trait/TraitBase.hpp>
#include <openassetio/trait/collection.hpp>
#include <openassetio/trait/property.hpp>

{% if imports -%}
{%- for import in imports -%}
{%- if import != package.id -%}
#include <{{ import | to_cpp_module_name }}/{{ import | to_cpp_module_name }}.hpp>
{% endif -%}
{%- endfor -%}
{%- endif %}
{% if package.id in imports -%}
#include "../traits/traits.hpp"
{%- endif %}

{%- macro trait_type(trait) -%}
{%- if trait.package == package.id -%}
traits::{{trait.namespace | to_cpp_module_name }}::{{trait.name | to_cpp_class_name }}Trait
{%- else -%}
{{ trait.package | to_cpp_module_name }}::traits::{{trait.namespace | to_cpp_module_name }}::{{ trait.name | to_cpp_class_name }}Trait
{%- endif -%}
{%- endmacro %}

/**
 * Specification definitions in the '{{ namespace.id }}' namespace.
 *
 * {{ namespace.description | wordwrap(69, wrapstring="\n* ") | indent(1) }}
 */
namespace {{ package.id | to_cpp_module_name }}::specifications::{{ namespace.id | to_cpp_module_name }} {
{% for specification in namespace.members -%}
/**
 * {{ specification.description | wordwrap(69, wrapstring="\n* ") | indent(1) }}
{%- if specification.usage %}
 * Usage: {{ specification.usage | join(', ') }}
{%- endif %}
 */
struct {{ specification.id | to_cpp_class_name }}Specification {
  inline static const openassetio::trait::TraitSet kTraitSet{
    {%- for trait in specification.trait_set %}
    // '{{ trait.id }}'
      {%- if trait.package == package.id %}
    traits::{{ trait.namespace | to_cpp_module_name }}::{{ trait.name | to_cpp_class_name }}Trait::kId,
      {%- else %}
    {{ trait.package | to_cpp_module_name }}::traits::{{ trait.namespace | to_cpp_module_name }}::{{ trait.name | to_cpp_class_name }}Trait::kId,
      {%- endif %}
    {%- endfor %}
  };
{% for trait in specification.trait_set %}
  /**
   * Returns the view for the '{{ trait.id }}'
   * trait wrapped around the data held in this instance.
   */
  {{ trait_type(trait) }} {{ trait.unique_name_parts | to_cpp_trait_accessor_name }}Trait() {
    return {{ trait_type(trait) }}{traitsData_};
  }
{% endfor %}
  openassetio::TraitsDataPtr traitsData_;
};

{% endfor %}
}
